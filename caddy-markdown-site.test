#! /usr/bin/env tclsh
# These tests require Tcl 8.6+ and Tcllib installed.  On Debian/Ubuntu run,
# $ sudo apt install tcl tcllib
# You will also need a Caddy binary in the PATH or to specify its location
# in the environment variable CADDY.

package require Tcl 8.6-10

package require fileutil
package require http
package require tcltest

proc main {} {
    cd [file dirname [info script]]

    set caddy caddy
    if {[info exist ::env(CADDY)]} {
        set caddy $::env(CADDY)
    }
    set port      [expr { 8000 + int(100 * rand()) }]
    set url       http://localhost:$port
    set adminPort [expr { 22000 + int(100 * rand()) }]
    set adminAddr localhost:$adminPort

    set config [regsub :8080 [fileutil::cat Caddyfile] :$port]
    fileutil::writeFile Caddyfile.test "{\n\tadmin $adminAddr\n}\n$config"

    exec $caddy run -config Caddyfile.test >@ stdout 2>@ stderr &
    after 2000


    tcltest::test index-1.1 {} -body {
        fetch $url
    } -match glob -result {*<title>Welcome*}

    tcltest::test index-1.2 {} -body {
        fetch $url/index-html/
    } -match glob -result {*axist.min.css*<h1>This is an HTML index.</h1>*}

    tcltest::test index-1.3 {} -body {
        fetch $url/index-txt/
    } -match glob -result {*text file index*}

    tcltest::test subdir-1.1 {} -body {
        fetch $url/index-md
    } -match glob -result {*index of a subdirectory*}

    tcltest::test extension-1.1 {} -body {
        set a [compress-whitespace [fetch $url/index]]
        set b [compress-whitespace [fetch $url/index.md]]
        list [expr { $a eq $b }] $a $b
    } -match glob -result {1 *}

    tcltest::test template-css-1.1 {} -body {
        fetch $url/templates/axist.min.css
    } -match glob -result *font-size:*


    fetch http://$adminAddr/stop -method POST

    # Exit with a nonzero status if there are failed tests.
    set failed [expr { $tcltest::numTests(Failed) > 0 }]

    tcltest::cleanupTests
    return $failed
}

proc fetch {url args} {
    try {
        set token [http::geturl $url {*}$args]
        http::data $token
    } finally {
        catch { http::cleanup $token }
    }
}

proc compress-whitespace text {
    regsub -all {(\s)\s+} $text {\1}
}

exit [main]
